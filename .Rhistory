# define the rownames
row_names <- c("row1", "row2", "row3")
col_names <- c("col1", "col2", "col3")
mat_names <- c("mat1", "mat2")
# now remake the array with the names
ar_named = array(c(vec1, vec2, vec3), dim = c(3, 3, 2),
dimnames = list(row_names, col_names, mat_names))
ar_named
ar_named[,,2]
ar_named[,2,]
ary_named[1,3,]
ar_named[1,3,]
ar_named[ , ,2]
ar_named[ , ,2]
# now remake the array with the names
ar_named = array(c(vec1, vec2, vec3), dim = c(3, 3, 2),
dimnames = list(row_names, col_names, mat_names))
ar_named
ar_named[ , 2, ]
ar_named[1, 3, ]
ar_named[3, 1, 2]
library()
install.packages("dplyr")
library("dplyr")
getwd()
data <- read.csv("/home/coleb/Documents/r-work/eeb225")
getwd()
data <- read.csv("/home/cole/Documents/r-work/eeb225")
install.packages("here")
library(writexl)
airquality
plot(x = airquality$Day, y = airquality$Temp)
plot(x = airquality$Day, y = airquality$Temp, col = "red")
install.packages("lterdatasampler")
install.packages("lterdatasampler")
library(lterdatasampler)
# install.packages("remotes")
remotes::install_github("lter/lterdatasampler")
library(lterdatasampler)
# first call the dataset
crabs <- pie_crab
# first call the dataset from the lterdatasampler package
crabs <- lterdatasampler::pie_crab
head(crabs)
unique(crabs$site)
vcr_data <- data[,which(data$site == "VCR")]
vcr_data <- data[which(data$site == "VCR"),]
vcr_crabs <- crabs[which(crabs$site == "VCR"),]
?which()
unique(vcr_crabs$site)
vc_crabs <- crabs %>%
dplyr::filter(site == "VCR" | "BC")
library(tidyverse)
vc_crabs <- crabs %>%
dplyr::filter(site == "VCR" | "BC")
vc_crabs <- crabs %>%
dplyr::filter(site == "VCR" | site == "BC")
focal_sites <- c("ZI", "RC", "VCR", "DB", "JC")
focal_sites <- c("ZI", "RC", "VCR", "DB", "JC")
focal_crabs <- crabs[which(crabs$site %in% focal_sites),]
names(crabs)
hist(crabs$size)
site_size <- crabs[which(crabs$site %in% focal_sites &
crabs$size > 15), ]
site_size <- crabs %>%
dplyr::filter(site %in% focal_sites & size > 15)
hist(site_size$size)
unique(site_size$site)
summary(crabs)
is.na(crabs)
any(is.na(crabs))
any(is.na(ntl_icecover))
ice <- lterdatasampler::ntl_icecover
is.na(ice)
head(ice)
?is.na
trimmed_ice <- ice[which(!is.na(ice$ice_duration)),]
trimmed_ice <- ice %>%
dplyr::filter(!is.na(ice_duration))
# load libraries
library(lterdatasampler)
library(tidyverse)
bison <- lterdatasampler::knz_bison
head(bison)
names(bison)
bison = bison %>%
dplyr::rename(code = animal_code)
names(bison)
names(bison)
bison = bison %>%
dplyr::rename(
sex = animal_sex,
weight = animal_weight,
yob = animal_yob
)
names(bison)
group = sample(c("First", "Second", "Third", "Fourth"), 500)
group = sample(c("First", "Second", "Third", "Fourth"), 500, replace = TRUE)
vals = rnorm(500, mean = 10, sd = 2)
df = data.frame(group, vals)
View(df)
df = data.frame(as.factor(group), vals)
View(df)
df = data.frame(group = as.factor(group), vals)
str(df)
ggplot(data = df) +
geom_violin(aes(x = group, y = vals, colour = group))
ggplot(data = df) +
geom_violin(aes(x = group, y = vals, colour = group)) +
theme_base()
library(ggthemes)
ggplot(data = df) +
geom_violin(aes(x = group, y = vals, colour = group)) +
theme_base()
ggplot(data = df) +
geom_violin(aes(x = group, y = vals, colour = group)) +
theme_base() +
labs(x = "Order of Sample", y = "Data Values") +
scale_colour_manual("Group", values = c("#332288", "#88CCEE",
"#44AA99", "#117733"))
ggplot(data = df) +
geom_violin(aes(x = group, y = vals, fill = group)) +
theme_base() +
labs(x = "Order of Sample", y = "Data Values") +
scale_fill_manual("Group", values = c("#332288", "#88CCEE",
"#44AA99", "#117733"))
library(forcats)
df$group = forcats::fct_relevel(df$group, levels = c("First", "Second",
"Third", "Fourth"))
str(df$group)
summary(df$group)
str(df$group)
levels(df$group)
levels(df$group)
group = sample(c("First", "Second", "Third", "Fourth"), 500, replace = TRUE)
vals = rnorm(500, mean = 10, sd = 2)
df = data.frame(group = as.factor(group), vals)
levels(df$group)
library(ggthemes)
group = sample(c("First", "Second", "Third", "Fourth"), 500, replace = TRUE)
vals = rnorm(500, mean = 10, sd = 2)
df = data.frame(group = as.factor(group), vals)
ggplot(data = df) +
geom_violin(aes(x = group, y = vals, fill = group)) +
theme_base() +
labs(x = "Order of Sample", y = "Data Values") +
scale_fill_manual("Group", values = c("#332288", "#88CCEE",
"#44AA99", "#117733"))
library(ggthemes)
ggplot(data = df) +
geom_violin(aes(x = group, y = vals, fill = group)) +
theme_base() +
labs(x = "Order of Sample", y = "Data Values") +
scale_fill_manual("Group", values = c("#332288", "#88CCEE",
"#44AA99", "#117733"))
library(forcats)
df$group = forcats::fct_relevel(df$group, levels = c("First", "Second",
"Third", "Fourth"))
# now we can use the base R function `levels()` to check if the order is what
# we want it to be
levels(df$group)
df$group = forcats::fct_relevel(
df$group, levels = c("First", "Second", "Third", "Fourth")
)
ggplot(data = df) +
geom_violin(aes(x = group, y = vals, fill = group)) +
theme_base() +
labs(x = "Order of Sample", y = "Data Values") +
scale_fill_manual("Group", values = c("#332288", "#88CCEE",
"#44AA99", "#117733"))
group = factor(sample(c("1", "2", "Three", "4"), size = 500))
group = factor(sample(c("1", "2", "Three", "4"), size = 500, replace = TRUE))
vals = rnorm(500, mean = 2, sd = 2.5)
df = data.frame(group, vals)
# let's look at the levels of our `group` column
levels(df$group)
recode(
# first argument is the data object
df$group,
# next argument is the level we want to replace
"Three" = "3")
df$group = recode(
# first argument is the data object
df$group,
# next argument is the level we want to replace
"Three" = "3")
levels(df$group)
as.integer(df$group)
group = factor(sample(c("1", "2", "Three", "4"), size = 500, replace = TRUE))
vals = rnorm(500, mean = 2, sd = 2.5)
df = data.frame(group, vals)
# let's look at the levels of our `group` column
levels(df$group)
df = df %>%
dplyr::mutate(
group = recode(
# first argument is the data object
group,
# next argument is the level we want to replace
"Three" = "3")
)
levels(df$group)
group = factor(sample(c("4", "5", "Six", "7"), size = 500, replace = TRUE))
vals = rnorm(500, mean = 2, sd = 2.5)
df = data.frame(group, vals)
# let's look at the levels of our `group` column
levels(df$group)
df = df %>%
dplyr::mutate(
group = recode(
# first argument is the data object
group,
# next argument is the level we want to replace
"Six" = "6")
)
levels(df$group)
as.integer(df$group)
as.integer(as.character(df$group))
df = df %>%
dplyr::mutate(
group = as.integer(as.character(group))
)
levels(df$group)
df = df %>%
dplyr::mutate(
group = as.factor(as.integer(as.character(group)))
)
levels(df$group)
df = data.frame(
num_ex = sample(c(1,2,3,4), replace = TRUE, 50),
log_ex = sample(c(TRUE, FALSE), replace = TRUE, 50),
chr_ex = sample(c("hehe", "haha", replace = TRUE, 50))
)
df = data.frame(
num_ex = sample(c(1,2,3,4), replace = TRUE, 50),
log_ex = sample(c(TRUE, FALSE), replace = TRUE, 50),
chr_ex = sample(c("hehe", "haha"), replace = TRUE, 50))
df
str(df)
str(df)
df_fac = df %>%
dplyr::mutate(
num_ex = as.factor(num_ex),
log_ex = as.factor(log_ex),
chr_ex = as.factor(chr_ex)
)
str(df_fac)
df_both = df %>%
dplyr::mutate(
num_ex_fac = as.factor(num_ex),
log_ex_fac = as.factor(log_ex),
chr_ex_fac = as.factor(chr_ex)
)
str(df_both)
group = factor(sample(c("4", "5", "Six", "7"), size = 500, replace = TRUE))
vals = rnorm(500, mean = 2, sd = 2.5)
df = data.frame(group, vals)
# let's look at the levels of our `group` column
levels(df$group)
df = df %>%
dplyr::mutate(
group = recode(
# first argument is the data object
group,
# next argument is the level we want to replace
"Six" = "6")
)
levels(df$group)
df = df %>%
dplyr::mutate(
group = forcats::fct_relevel(group, c("4", "5", "6", "7"))
)
levels(df$group)
library(lterdatasampler)
df = lterdatasampler::hbr_maples
df = lterdatasampler::hbr_maples
head(df)
df %>%
dplyr::mutate(forest = "HBEF")
summary(df$sample)
df %>%
dplyr::rowwise() %>%  # ensures calculation done for each row
dplyr::mutate(
mean_area = mean(leaf1area, leaf2area)
)
df %>%
dplyr::rowwise() %>%  # ensures calculation done for each row
dplyr::mutate(
mean_area = mean(leaf1area, leaf2area, na.rm = TRUE)
)
df = df %>%
dplyr::select(year, watershed, elevation, leaf1area, leaf2area)
df
df %>%
dplyr::mutate(forest = "HBEF")
ggplot(df) +
geom_density(aes(x = leaf1area))
ggplot(df) +
geom_density(aes(x = leaf1area), fill = "red")
ggplot(df) +
geom_density(aes(x = leaf1area), fill = "red", alpha = 0.2)
ggplot(df) +
geom_density(aes(x = leaf1area), fill = "red", alpha = 0.2) +
geom_density(aes9x = leaf2area), fill = "blue", alpha = 0.2)
ggplot(df) +
geom_density(aes(x = leaf1area), fill = "red", alpha = 0.2) +
geom_density(aes(x = leaf2area), fill = "blue", alpha = 0.2)
ggplot(df) +
geom_density(aes(x = leaf1area, fill = "red"), alpha = 0.2) +
geom_density(aes(x = leaf2area), fill = "blue", alpha = 0.2)
ggplot(df) +
geom_density(aes(x = leaf1area, fill = leaf1area), alpha = 0.2) +
geom_density(aes(x = leaf2area), fill = "blue", alpha = 0.2)
ggplot(df) +
geom_density(aes(x = leaf1area, , fill = "red"), alpha = 0.2) +
geom_density(aes(x = leaf2area), fill = "blue", alpha = 0.2)
ggplot(df) +
geom_density(aes(x = leaf1area, fill = "red"), alpha = 0.2) +
geom_density(aes(x = leaf2area), fill = "blue", alpha = 0.2) +
theme_base(0)
ggplot(df) +
geom_density(aes(x = leaf1area, fill = "red"), alpha = 0.2) +
geom_density(aes(x = leaf2area), fill = "blue", alpha = 0.2) +
theme_base()
ggplot(df) +
geom_density(aes(x = leaf1area, fill = "area 1"), alpha = 0.2) +
geom_density(aes(x = leaf2area), fill = "blue", alpha = 0.2) +
theme_base()
ggplot(df) +
geom_density(aes(x = leaf1area, fill = "area 1"), alpha = 0.2) +
geom_density(aes(x = leaf2area, fill = "area 2"), alpha = 0.2) +
theme_base()
ggplot(df) +
geom_density(aes(x = leaf1area, fill = "area 1"), alpha = 0.2) +
geom_density(aes(x = leaf2area, fill = "area 2"), alpha = 0.2) +
theme_base() +
labs(x = "Leaf Area Measurements")
df = df %>%
dplyr::rowwise() %>%  # ensures calculation done for each row
dplyr::mutate(
mean_area = mean(leaf1area, leaf2area, na.rm = TRUE)
)
df
ggplot(df) +
geom_density(aes(x = leaf1area, fill = "area 1"), alpha = 0.1) +
geom_density(aes(x = leaf2area, fill = "area 2"), alpha = 0.1) +
geom_density(aes(x = mean_area, fill = "area 2"), alpha = 0.1) +
theme_base() +
labs(x = "Leaf Area Measurements")
ggplot(df) +
geom_density(aes(x = leaf1area, fill = "area 1"), alpha = 0.1) +
geom_density(aes(x = leaf2area, fill = "area 2"), alpha = 0.1) +
geom_density(aes(x = mean_area, fill = "mean area"), alpha = 0.1) +
theme_base() +
labs(x = "Leaf Area Measurements")
df
df = df %>%
dplyr::rowwise() %>%  # ensures calculation done for each row
dplyr::mutate(
mean_area = mean(leaf1area, leaf2area)
)
summary(leaf1area)
summary(df$leaf1area)
df = df %>%
dplyr::rowwise() %>%  # ensures calculation done for each row
dplyr::mutate(
mean_area = mean(leaf1area, leaf2area, na.rm = TRUE)
)
mean(df$leaf1area, df$leaf2area)
mean(df$leaf1area, df$leaf2area, na.rm = TRUE)
df = df %>%
dplyr::rowwise() %>%  # ensures calculation done for each row
dplyr::mutate(
mean_area = mean(c(leaf1area, leaf2area), na.rm = TRUE)
)
df
ggplot(df) +
geom_density(aes(x = leaf1area, fill = "area 1"), alpha = 0.1) +
geom_density(aes(x = leaf2area, fill = "area 2"), alpha = 0.1) +
geom_density(aes(x = mean_area, fill = "mean area"), alpha = 0.1) +
theme_base() +
labs(x = "Leaf Area Measurements")
ggplot(df) +
geom_density(aes(x = leaf1area, fill = "area 1"), alpha = 0.4) +
geom_density(aes(x = leaf2area, fill = "area 2"), alpha = 0.4) +
geom_density(aes(x = mean_area, fill = "mean area"), alpha = 0.4) +
theme_base() +
labs(x = "Leaf Area Measurements")
df = df %>%
dplyr::select(year, watershed, elevation, leaf1area,
leaf2area, corrected_leaf_area)
library(lterdatasampler)
df = lterdatasampler::hbr_maples
head(df)
df = df %>%
dplyr::select(year, watershed, elevation, leaf1area,
leaf2area, corrected_leaf_area)
df
df %>%
dplyr::mutate(forest = "HBEF")
df = df %>%
dplyr::rowwise() %>%  # ensures calculation done for each row
dplyr::mutate(
mean_area = mean(c(leaf1area, leaf2area), na.rm = TRUE)
)
df
df = df %>%
dplyr::mutate(forest = "HBEF")
df
df = df %>%
dplyr::rowwise() %>%  # ensures calculation done for each row
dplyr::mutate(
mean_area = mean(c(leaf1area, leaf2area), na.rm = TRUE)
)
df
df = df %>%
dplyr::rowwise() %>%  # we still need this to get a value for each row
dplyr::mutate(
corrected_mean_ratio = mean_area / corrected_leaf_area
)
df
ggplot(df) +
geom_density(aes(x = corrected_mean_ratio, fill = "pink"), alpha = 0.4) +
theme_base()
summary(df$year)
summary(df$watershed)
summary(df$elevation)
summary(corrected_leaf_area)
summary(df$corrected_leaf_area)
df %>%
dplyr::rowwise() %>%
dplyr::mutate(
corrected_above_below = as.factor(ifelse(
corrected_leaf_area > mean(df$corrected_leaf_area),
"Above",
"Below"
))
)
# overall mean
mean_val = mean(df$corrected_leaf_area, na.rm = TRUE)
df %>%
dplyr::rowwise() %>%
dplyr::mutate(
corrected_above_below = as.factor(ifelse(
corrected_leaf_area > mean_val,
"Above",
"Below"
))
)
df %>%
dplyr::rowwise() %>%
dplyr::mutate(
group = paste0(as.character(year),
watershed,
elevation)
)
df %>%
dplyr::rowwise() %>%
dplyr::mutate(
group = paste(as.character(year),
watershed,
elevation,
sep = "_")
)
df %>%
dplyr::rowwise() %>%
dplyr::mutate(
# we can use paste() from base R to paste the characters together
group = paste(year, # need to turn this into a character here
watershed,
elevation,
sep = "_")
)
df %>%
dplyr::rowwise() %>%
dplyr::mutate(
# we can use paste() from base R to paste the characters together
group = paste(year,
watershed,
elevation,
sep = "_") # we want each component separated by a "_"
)
df = df %>%
dplyr::rowwise() %>%
dplyr::mutate(
# we can use paste() from base R to paste the characters together
group = paste(year,
watershed,
elevation,
sep = "_") # we want each component separated by a "_"
)
df
summary(df$group)
table(df$group)
str(df$group)
df = df %>%
dplyr::rowwise() %>%
dplyr::mutate(
# we can use paste() from base R to paste the characters together
group = as.factor(paste(year,
watershed,
elevation,
sep = "_")) # we want each component separated by a "_"
)
df
str(df$group)
summary(df$group)
unique(df$group)
summary(df$year)
summary(df$watershed)
summary(df$elevation)
table(df$group)
