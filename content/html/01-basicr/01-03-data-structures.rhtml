<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="../css/stylesheet.css">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Karma">
<link rel="stylesheet"
      href="../highlight/styles/default.min.css">
<script src="../highlight/highlight.js"></script>
<script src="../functions.js"></script>
<script>hljs.highlightAll();</script>
<style>
body,h1,h2,h3,h4,h5,h6 {font-family: "Lato", sans-serif}
.w3-bar-block .w3-bar-item {padding:20px}
</style>
</head>
<body class="w3-round-large">

<!-- Top menu -->
<div class="w3-top">
  <div class="w3-navy w3-xlarge" 
  style="max-width:auto;margin:auto;border:1px w3-gray"
  border:1px>
    <div class="w3-button w3-padding-16 w3-left" onclick="w3_open()">☰</div>
    <div class="w3-right w3-padding-16" style="padding-right:10px">EEB </div>
    <div class="w3-center w3-padding-16">The R Manual</div>
  </div>
</div>

<!-- Sidebar (hidden by default) -->
<nav class="w3-sidebar w3-bar-block w3-card w3-top w3-xlarge w3-animate-left" 
style="display:none;z-index:2;width:40%;min-width:300px" id="mySidebar">
  <a href="javascript:void(0)" onclick="w3_close()"
  class="w3-bar-item w3-button">Close Menu</a>
  <a href="#about" onclick="w3_close()" class="w3-bar-item w3-button">About</a>
  <a href="#contact" onclick="w3_close()" 
  class="w3-bar-item w3-button">Contact</a>
</nav>

<main style = margin-top:100px>
    <nav class="section-nav">
        <ol>
          <li><a href="#str">Data Structures</a>
            <ul>
              <li class=""><a href="#str--vec">Vectors</a>
                <ul>
                  <li class=""><a href="#str--vec--atomic">Atomic Vectors</a></li>
                  <li class=""><a href="#str--vec--list">Lists</a></li>
                </ul></li>
                <li class=""><a href="#str--mat">Matrices</a></li>
                <li class=""><a href="#str--df">DataFrames</a></li>
            </ul>
          </li>
        </ol>
      </nav>
    <div>
      <section id="str">
        <h2>Data Structures</h2>
        <p>
          To make use of these individual pieces of data we combine them together into data <em>structures</em>. There are 4 main data structures that we work with consistently:
        </p>
        <ol type="I">
            <li><strong>Vectors</strong></li>
            <li><strong>Matrices</strong></li>
            <li><strong>DataFrames</strong></li>
            <li><strong>Arrays</strong></li>
        </ol>
        <p>
          This helpful graphic may help you cement these types in your memory
        </p>
        <img class="image-full-page" style="display:block;margin:auto"
        src="../img/01-img/data-structures.png">
        <section id="str--vec">
          <h3>Vectors</h3>
          <p>
            Vectors are subset into atomic vectors (collections of data of the same type) and lists (collections of different data types). Vectors are the workshorses of R and mosts other OOP languages use vectors or a very similar structure to hold data. From this point forward, we’ll use "vector" to refer to atomic vectors and call lists by name. We make vectors the same way we make variables, with an assignment statement.
          </p>
        </section>
        <section id="str--vec--atom">
          <h4>Atomic Vectors</h4>
          <p>
            Often we start by making an empty vector that we may decide to fill with values later. To do this, we use the <code>vector()</code> function.
          </p>
          <!--begin.rcode 
          x <- vector("character", length = 5)
          end.rcode-->
          <p>
            Here, the function <code>vector()</code> takes two required arguments. the first argument asks for the data <em>type</em> we would like to use, and the second is the number of elements (the <em>length</em>) that we want the vector to be. 
          </p>
          <p>
            When we already know the content we want included, we can use a simpler <code>c()</code> function (<code>c</code> is short for <em>combine</em>). 
          </p>
          <!--begin.rcode 
            x <- c(1, 2, 3, 4)
            end.rcode-->
          <p>
            Here, R automatically understands what type of data we're using and since we passed four values, the length is automatically four. We could actually shorten this using R's <code>:</code> notation:
          </p>
          <!--begin.rcode 
            y <- c(1:4)
            end.rcode-->
          <p>
            And we can check this works as expected:
          </p>
          <!--begin.rcode 
            x == y
            end.rcode-->
          <p>
            <strong>Note:</strong> One thing to understand is that previously when we assigned a variable a single data object (i.e. <!--rinline x <- 10 -->), what we were actually doing is making a vector! This is just a special case vector of length 1. 
          </p>
          <p>
            We can determine what is and what is NOT an atomic vector with the following basic command <code>is.atomic()</code>. Recall that lists are <em>also</em> vectors, but not the kind we're working with now, so this checks if a vector is an atomic vector or not. 
          </p>
          <p>
            Vectors, especially string vectors, can change depending on how they're created. For example, here we have two vectors that spell out the same sentence, but are not equivalent:
          </p>
          <!--begin.rcode 
            x  <- c("The quick brown fox jumped over the lazy dog")
            y <- c("The", "quick", "brown", "fox", "jumped", "over", "the", "lazy", "dog")
            x == y
            end.rcode-->
          <p>
            We can see by checking the length of each that they lengths are not equivalent. The second vector <code>y</code> is actually made up of 9 individual data pieces, while <code>x</code> is a singular datum:
          </p>
          <!--begin.rcode 
            length(x)
            length(y)
            end.rcode-->
          <p>
            Vectors are flexible in that we can bind them together easily:
          </p>
          <!--begin.rcode 
            x1 <- c(x, "who was sunning himself")
            y1 <- c(y, "who", "was", "sunning", "himself")
            end.rcode-->
          <p>
            and also simply edit components of them:
          </p>
          <!--begin.rcode 
            y[9] <- "cat"
            y
            end.rcode-->
          <p>
            <strong>Note:</strong> We can only do this here because we created each word as it's own data point inside the vector. The above is an example of <em>indexing</em> which we discuss elsewhere, but for now, it can be interpreted as selecting an element of the vector and changing it. 
          </p>
        </section>
        <section id="str--vec--list">
          <h4>Lists</h4>
          <p>
            Lists are the second type of vector we may want to use. They are more flexible in that they can contain multiple datatypes, whereas atomic vectors must all be of the same type. They are created much the same as vectors:
          </p>
          <!--begin.rcode 
            l <- list(1, 2, "R is fun", c(1, 2, 3), TRUE)
            l
            end.rcode-->
          <p>
            Here we see a number of square brackets denoting the indexing of the list object <code>l</code>. This looks confusing but will be discussed in the <em>Indexing</em> section. 
          </p>
          <p>
            Instead of these numbers, we could name the list components. This is often handy for keeping data of variable lengths/types that can be related together. For example:
          </p>
          <!--begin.rcode 
            eeb_prof <- list("name" = "Dr. Agrawal",
                  "positions" = c("Distinguished Professor of Evolutionary Genetics",
                                  "Associate Chair, Graduate Studies"),
                  "concentrations" = c("Genetics, Genomics & Molecular Evolution",
                                        "Theoretical & Computational Biology"))

            eeb_prof
            end.rcode-->
          <p>
            We now see we have three named list components, each of which gives a different piece of information about the professor at hand. 
          </p>
          <p>
            We will not work much with lists here as their primary utility does not become apparent until more advanced types of computations are required. 
          </p>
        </section>
        <section id="str--mat">
          <h4>Matrices</h4>
          <p>
            Matrices are a logical extension of vectors as they can be thought of as a series of vectors bound together to form a 2D structure made up of rows and columns. Matrices have the same limit as a vector and must contain data of the same type (numeric or character). They are also constructed similarly:
          </p>
          <!--begin.rcode 
            m <- matrix(nrow = 2, ncol = 2)
            m
            end.rcode-->
          <p>
            This above is an empty matrix, we haven't told R to put anything in the matrix, but this empty matrix concept is used frequently to preallocate memory before being filled in later. We could make a matrix with some values like this:
          </p>
          <!--begin.rcode 
            m <- matrix(100, nrow = 2, ncol = 2)
            end.rcode-->
          <p>
            And this will make a matrix with four values of 100. Multiple values are possible as well: 
          </p>
          <!--begin.rcode 
            m <- matrix(c(100, 200, 300, 400), nrow = 2, ncol = 2)
            end.rcode-->
          <p>
            Here we passed an atomic vector as the first argument to <code>matrix()</code>, and then the dimensions that we wanted to get for our matrix. Note that if the dimensions specified are not filled by the vector passed, an error will occur: 
          </p>
          <!--begin.rcode 
            m <- matrix(c(100, 200, 300, 400), nrow = 3, ncol = 2)
            end.rcode-->
          <p>
            We can also make matrices by combining existing vectors. Let's make two vectors and combine them into a matrix using two different approaches: 
          </p>
          <!--begin.rcode 
            vec1 <- c(1, 2)
            vec2 <- c(3, 4)
            end.rcode-->
          <p>
            First, if I want <code>vec1</code> to be the first row and <code>vec2</code> to be the second row, I simply need to bind them together as <em>rows</em> with the aptly named <code>rbind()</code> function:
          </p>
          <!--begin.rcode 
            m1 <- rbind(vec1, vec2)
            m1
            end.rcode-->
          <p>
            If instead I wanted <code>vec1</code> to be the first column and <code>vec2</code> to be the second column, I would bind them together as <em>columns</em> using the <code>cbind()</code> function:
          </p>
          <!--begin.rcode 
            m2 <- cbind(vec1, vec2)
            m2
            end.rcode-->
        </section>
        <section id="str--df">
          <h4>DataFrames</h4>
          <p>
            The darlings of R. These structures are the feature of R that make it so popular for data analysis and statistics. It is the easiest way to store, access, and perform operations on tabular data (the type of data we most often have in biology). Dataframes are actually a type of list, one wherein each element of the list has the same length, making it of dimension 2, which means we easily can look at rows and columns. They’re usually created directly by reading in data (we’ll get to this shortly), or by creation through the <code>data.frame</code> command:
          </p>
          <!--begin.rcode 
            c1 <- c(1:4)
            c2 <- c("item1", "item2", "item3", "item4")
            c3 <- c(11:14)

            # we can combine these values as columns into a dataframe
            d <- data.frame(c1, c2, c3)
            d
            end.rcode-->
          <p>
            It's easy to add rows or columns using row binding:
          </p>
          <!--begin.rcode 
            c4 <- c("add1", "add2", "add3", "add4")
            d1 <- cbind(d, c4)
            d1
            end.rcode-->
          <p>
            Or column binding:
          </p>
          <!--begin.rcode 
            r5 <- list(5L, "item5", 15L, "add5") 
            d2 <- rbind(d1, r5)
            d2
            end.rcode-->
          <p>
            Notice above to create row 5, we used <code>list()</code> instead of <code>c()</code>. Why? Recall that <code>c()</code> only works for atomic vectors, so if we used the same arguments but the command <code>c()</code>, R would think we wanted an atomic vector, so would actually change our integer values to characters. Let's look at it:
          </p>
          <!--begin.rcode 
            r5 <- c(5L, "item5", 15L, "add5")
            str(r5)
            end.rcode-->
          <p>
            We can see all the values of <code>r5</code> are now characters. Also, notice above that we force integer type with the <code>L</code> following the number. Why? Well when using <code>list()</code>, if we just pass the number 3, <code>list()</code> would interpret that as a numeric type, and when  we bound it to the dataframe, because each column must only have one type, to fix the fact that some values would be integers and some numerics, R would go behind the scenes and change the type of those columns to numerics. Let's see:
          </p>
          <!--begin.rcode 
            r5 <- list(5, "item5", 15, "add5") 
            str(r5)
            end.rcode-->
          <p>
            Note that the first and third elements now have type <code>num</code> instead of type <code>int</code>!
          </p>
          <!--begin.rcode 
            d3 <- rbind(d1, r5)
            d3
            end.rcode-->
          <p>
            Now we can see in the output that columns <code>c1</code> and <code>c2</code> have type <code><dbl></code> which we recall from Data Types are equivalent. This isn't a big deal, but something to be aware of in case we really needed <code>c1</code> and <code>c2</code> to be integers. 
          </p>
          <p>
            Dataframes are ultra-flexible, and have a lot of underlying structure. The best way to inspect this structure is with the <code>str()</code> command:
          </p>
          <!--begin.rcode 
            str(d2)
            end.rcode-->
            <p>
              We can also get the column names of a dataframe,
            </p>
            <!--begin.rcode 
              names(d2)
              end.rcode-->
            <p>
              the number of rows or columns,
            </p>
            <!--begin.rcode 
              nrow(d2)
              ncol(d2)
              end.rcode-->
            <p>
              or a summary of the dataframe,
            </p>
            <!--begin.rcode 
              summary(d2)
              end.rcode-->
            <p>
              For the integer columns, we get a very helpful summary of the values in the column. 
            </p>
            <section id="str--df--fac">
              <h5>Factors</h5>
              <p>
                We will briefly discuss factors here as their most common use is as columns in dataframes. Factors are variables which can only take on a certain number of values (aka "levels"). They are often referred to as the "categorical" variables of R. They are of special importance in statistical modelling since categorical variables enter into statistical models in a different way than continuous variables may do. 
              </p>
              <p>
                Similar to other datatypes, they can be created with their own function:
              </p>
              <!--begin.rcode 
                fac <- factor(c("one", "two", "three", "four", "one", "two", "three", "four"))
                fac
                end.rcode-->
              <p>
                The output here shows the values we passed (those within the <code>c()</code> function), but the levels aren't maybe what we'd expect. We passed what we know to be numbers, but R can't actually tell that, it just knows they are string values, so has sorted them alphabetically. We can control the <em>order</em> of factors with an additional argument to the function <code>factor()</code>:
              </p>
              <!--begin.rcode 
                fac1 <- factor(c("one", "two", "three", "four", "one", "two", "three", "four"),
                              levels = c("one", "two", "three", "four"))
                fac1
                end.rcode-->
              <p>
                Now the levels are in a more logical order. 
              </p>
              <p>
                Factors are most commonly used in dataframes, so let's change one of our <code>chr</code> variables in a dataframe we've already made to a <code>factor</code>. 
              </p>
              <!--begin.rcode 
                d
                end.rcode-->
              <p>
                Currently <code>d2</code> has <code>c2</code> column of type <code>chr</code>, but let's make it a factor. We could do this by changing the way we define <code>c2</code> originally like this:
              </p>
              <!--begin.rcode 
                c1 <- c(1:4)
                c2 <- factor(c("item1", "item2", "item3", "item4"))
                c3 <- c(11:14)

                # we can combine these values as columns into a dataframe
                d <- data.frame(c1, c2, c3)
                d
                end.rcode-->
              <p>
                But often we want to perform "in-place" operations to dataframes already created, so let's create the dataframe as before then once created, only re-create that one column:
              </p>
              <!--begin.rcode 
                c1 <- c(1:4)
                c2 <- c("item1", "item2", "item3", "item4")
                c3 <- c(11:14)

                # we can combine these values as columns into a dataframe
                d <- data.frame(c1, c2, c3)
                d
                end.rcode-->
              <p>
                So currently it's a <code>chr</code>, but we can <em>index</em> our column of interest by name, using the <code>$</code> operator, and perform the change this way. To change the column to a factor we again can use the <code>factor()</code> column: 
              </p>
              <!--begin.rcode 
                d$c2 <- factor(d$c2) 
                str(d)
                end.rcode-->
              <p>
                Now we can see the output has <code>c2</code> as a column. More on indexing <a href="01-04-indexing.html">here</a>.
              </p>
            </section>
        </section>
        <section id="str--array">
          <h4>Arrays</h4>
          <p>
            Last we'll go over some arrays. Arrays are very useful but can be difficult to visualize since they can store data in >2 dimensions, but let's just focus on 3-dimensional arrays for now. Again, we can create an array with the <code>array()</code> function, combining multiple vectors. 

          </p>
          <!--begin.rcode 
            vec1 <- c(1, 2, 3)
            vec2 <- c(4, 5, 6)
            vec3 <- c(7, 8, 9)
            ar1 <- array(c(vec1, vec2, vec3), dim = c(3, 3, 2))
            ar1
            end.rcode-->
          <p>
            We can read the <code>dims</code> argument just as we would order mathematical dimensions, always starting with <code>x</code> the first dimension, `y`, the second, and then <code>z</code> the third one. So we can think of this as having three rows (the <code>x</code> coordinate), and three columns (the <code>y</code> coordinate), which make up a single matrix in each of the two <code>z</code> dimensions. It's helpful to visualize this: 
          </p>
          <img class="image-full-page" style="display:block;margin:auto"
          src="../img/01-img/arrays.png">
          <p>
            It's often helpful to name each of our columns, rows, and matrices. To do this for the above array we might do the following: 
          </p>
          <!--begin.rcode 
            row_names <- c("row1", "row2", "row3")
            col_names <- c("col1", "col2", "col3")
            mat_names <- c("mat1", "mat2")

            # now remake the array with the names
            ar_named = array(c(vec1, vec2, vec3), dim = c(3, 3, 2), 
                            dimnames = list(row_names, col_names, mat_names))
            ar_named
            end.rcode-->
          <p>
            With the rows, columns, and matrices now named it's easier to refer to them. 
          </p>
        </section>
        </section>
<!-- End page content -->
<hr>
<p style="font-size:10px;color:gray;text-align:center">
    <br>
    <br>
    The EEB R Manual is the work of researchers at the University of the Toronto
     and intended as a purely educational resource. It holds no official 
    association with the R Foundation. It should not be taken as an
     authority on R best practices. 
    <br>
    When using this resource, <bold>always</bold> default to instructions and 
    guidance provided by your instructor. 
    <br>
    This content is reviewed regularly for errors and to make improvements, if you see an error and want to help us make this better, see the Contact Page
</p>
</div>

<script>
// Script to open and close sidebar
function w3_open() {
  document.getElementById("mySidebar").style.display = "block";
}
 
function w3_close() {
  document.getElementById("mySidebar").style.display = "none";
}
</script>
</main>

</body>
</html>