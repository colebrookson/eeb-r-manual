<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Karma">
    <link rel="stylesheet" href="../highlight/styles/default.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="../css/stylesheet.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.css" integrity="sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq" crossorigin="anonymous">
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.js" integrity="sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz" crossorigin="anonymous"></script>
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/contrib/auto-render.min.js" integrity="sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI" crossorigin="anonymous" onload="renderMathInElement(document.body);"></script>
    <script src="../highlight/highlight.js"></script>
    <script src="../functions.js"></script>
    <script>hljs.highlightAll();</script>
    <script
        src="https://code.jquery.com/jquery-3.3.1.js"
        integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60="
        crossorigin="anonymous">
    </script>
    <script> 
    $(function(){
    $("#header").load("../common/head.html"); 
    });
    </script> 
</head>
<body>
  <!--Add in the header-->
  <div id="header"></div>
<main style = margin-top:100px>
    <nav class="section-nav">
        <ol>
          <li><a href="#index">Indexing</a>
            <ul>
              <li class=""><a href="#index--vecs">Vectors</a></li>
              <li class=""><a href="#index--lists">Lists</a></li>
              <li class=""><a href="#index--mat">Matrices</a></li>
              <li class=""><a href="#index--df">DataFrames</a></li>
              <li class=""><a href="#index--arrays">Arrays</a></li>
            </ul>
          </li>
        </ol>
      </nav>
    <div>
      <section id="index">
        <h2>Indexing &amp; Querying Objects</h2>
        <p>
            Once an object is created, we will want to be able to access its various components. Each data type can be indexed in multiple ways, so we'll go through indexing options by data type. Note that R is a programming language that starts indexing at 1 (i.e. the first element is 1) unlike other common programming languages such as Python which begin indexing at 0.
        </p>
        <p>
            <strong>
                A simple rule of thumb when indexing is that most objects can be indexed using the <code>[ ]</code>, containing the appropriate number of dimensions for the object at hand.
            </strong>
        </p>
        <section id="index--vecs">
            <h3>Vectors</h3>
            <p>
                Vectors are indexed via the <code>[]</code> notation. In a one-dimensional vector, the simplest and most common way to index is to pass the index or element number we want to those square brackets.
            </p>
            <!--begin.rcode
            x <- c(1, 3, 9, 10, 76, 89)
            end.rcode-->
            <p>
            If we want to index the 9 in this vector, that's in the third position, or index 3. 
            </p>
            <!--begin.rcode
            x[3]
            end.rcode-->
            <p>
            Similarly with a character vector
            </p>
            <!--begin.rcode
            y <- c("The", "quick", "brown", "fox", "jumped", "over", "the", "lazy", "dog")
            end.rcode-->
            <p>
            If we want to access the element "fox", the fourth element, we will write: 
            </p>
            <!--begin.rcode
            y[4]
            end.rcode-->
            <p>
            While indexing vectors, we can also return all the elements of a vector NOT in a certain position via the `-` sign:
            </p>
            <!--begin.rcode
            y[-1]
            end.rcode-->
            <p>
            This returns all the elements of the vector *except* the first one. <br><br>
            We can also index based on multiple positions:
            </p>
            <!--begin.rcode
            y[c(1, 4, 9)]
            end.rcode-->
            <p>
            This returns the first, fourth, and ninth elements. 
            </p>
        </section>
        <section id="index--lists">
            <h3>Lists</h3>
            <p>
                Since lists are also vectors, they're also indexed with notation, but recall that each element of a list can hold other objects of multiple dimensions. We can use one set of square brackets to index the list item, and then another to index elements within that list item. To access the element of the list, we actually use double square brackets, <code>[[]]</code>.
            </p>
                <!--begin.rcode
                l <- list(1, 2, "R is fun", c(1, 2, 3), TRUE)
                l[[4]]
                end.rcode-->
                <p>
                Here we see `l[[4]]` produces the fourth element, an atomic vector of length 3. What if we want to access the third element of that atomic vector to, say, reassign it to the value 5. We can do so like this: 
                </p>
                <!--begin.rcode
                l[[4]][3]
                end.rcode-->
                <p>
                We could now reassign this value to 5. 
                </p>
                <!--begin.rcode
                l[[4]][3] <- 5
                l
                end.rcode-->
                <p>
                If we recall, we can also have named lists, which can be indexed by their names. 
                </p>
                <!--begin.rcode
                agrawal <- list("name" = "Dr. Aneil Agrawal",
                                "positions" = c("Distinguished Professor of Evolutionary Genetics",
                                                "Associate Chair, Graduate Studies"),
                                "concentrations" = c("Genetics, Genomics & Molecular Evolution",
                                                        "Theoretical & Computational Biology"))
                names(agrawal)
                end.rcode-->
                <p>
                By calling `names()` we can see the names of the different list components. We can index by any of these. 
                </p>
                <!--begin.rcode
                agrawal["concentrations"]
                end.rcode-->
                <p>
                Here, we have the choice to use the square bracket notation as before, or we can use a new kind, the `$` notation. 
                </p>
                <!--begin.rcode
                agrawal$concentrations
                end.rcode-->
                <p>
                This provides the same output. Now let's say we wanted to access the second element in this "concentrations" element. Perhaps we want to rearrange the wording to say "Computational & Theoretical Biology" instead. We could do that with either the `[[]][]` notation we used before, or perhaps the easier to read option of combining both the `$` and `[]`:
                </p>
                <!--begin.rcode
                agrawal$concentrations[2]
                end.rcode-->
                <p>
                Now let's reassign it:
                </p>
                <!--begin.rcode
                agrawal$concentrations[2] <- "Computational & Theoretical Biology"
                end.rcode-->
                <p>
                To check if it worked print the `agrawal` list to our console: 
                </p>
                <!--begin.rcode
                agrawal
                end.rcode-->
                <p>
                And we see it worked. 
            </p>
        </section>
        <section id="index--mat">
            <h3>Matrices</h3>
            <p>
                Indexing matrices is simple as it is a 2-dimensional extension of indexing atomic vectors. 
                </p>
                <!--begin.rcode
                m <- matrix(c(100, 200, 300, 400), nrow = 2, ncol = 2)
                m
                end.rcode-->
                <p>
                To access the value 300, we will need to specify that we want the value in the first row, and second column. <strong>Indexing in R is always done row then column.</strong> 
               </p>
                <!--begin.rcode
                m[1,2]
                end.rcode-->
                <p>
                We can get the entirety of the first row
                </p>
                <!--begin.rcode
                m[1, ]
                end.rcode-->
                <p>
                or the first column
                </p>
                <!--begin.rcode
                m[ ,1]
                end.rcode-->
                <p>
                by writing leaving the row/column argument empty, which tells R that for either condition, to include all values of that dimension. 
            </p>
        </section>
        <section id="index--df">
            <h3>DataFrames</h3>
            <p>
                Dataframes are lists (a special kind wherein all the elements are of the same length), so their indexing is actually very similar. Let's create an extension of the example we had above using some professors from the EEB department at the University of Toronto. We'll make a dataframe combining the information for a number of categories.
            </p>
            <p>
                This is just for fun, so let's use the EEB website to get information on each of the professors' names, the school they got their PhD at, and whether or not they're accepting applicants for graduate work.
            </p>
            <img class="image-full-page" style="display:block;margin:auto"
            src="../img/01-img/profs.png">
            <p>
                However, note that differently from above, we cannot have the "positions" nor the "concentrations" categories be of different lengths as that would violate the rules of a dataframe, so instead each category will be it's own vector:
                </p>
                <!--begin.rcode
                # first make a list for each professor
                names <- c("Dr. Aneil Agrawal", "Dr. Celina Baines", "Dr. Spencer C.H. Barrett",
                        "Dr. Megan Bontrager")
                phd <- c("Indiana", "Toronto", "Reading", "UBC")
                accepting <- c(FALSE, TRUE, FALSE, TRUE)


                # now make a dataframe out of these lists
                prof_df = data.frame(names, phd, accepting)
                prof_df
                end.rcode-->
                <p>
                If want to access any of the columns of this dataframe, we can do so by their <em>names</em>, the commonality with lists: 
                </p>
                <!--begin.rcode
                prof_df$phd
                end.rcode-->
                <p>
                We could also look at a single row: 
                </p>
                <!--begin.rcode
                prof_df[3, ]
                end.rcode-->
                <p>
                which tells us all about Dr. Barrett. We could also ask whether or not the fourth row professor, Dr. Bontrager, is accepting students: 
                </p>
                <!--begin.rcode
                prof_df$accepting[4]
                end.rcode-->
        </section>
        <section id="index--arrays">
            <h3>Arrays</h3>
            <p>
              Since these are three dimensional objects, we must include all indices to get to a specific element. Let's used the named array we had in the data structures section as our example here: 
              </p>
              <!--begin.rcode
              # pre-define the vectors
              vec1 <- c(1, 2, 3)
              vec2 <- c(4, 5, 6)
              vec3 <- c(7, 8, 9)

              # define the rownames 
              row_names <- c("row1", "row2", "row3")
              col_names <- c("col1", "col2", "col3")
              mat_names <- c("mat1", "mat2")

              # now remake the array with the names
              ar_named = array(c(vec1, vec2, vec3), dim = c(3, 3, 2), 
                              dimnames = list(row_names, col_names, mat_names))
              ar_named
              end.rcode-->
              <p>
              To access each of these elements, we need to recall that the indexing will go `[row, column, matrix]`. So to see just the second row but all the columns and rows we might write: 
              </p>
              <!--begin.rcode
              ar_named[,,2]
              end.rcode-->
              <p>
              but to see each of the second columns in both matrices and all rows, we can write: 
              </p>
              <!--begin.rcode
              ar_named[, 2, ]
              end.rcode-->
              <p>
              Further, if we want only the first row and the third column elements for all matrices, we can write: 
              </p>
              <!--begin.rcode
              ar_named[1, 3, ]
              end.rcode-->
              <p>
              but the value for the third row, first column, only in matrix 2 would be found by: 
              </p>
              <!--begin.rcode
              ar_named[3, 1, 2]
              end.rcode-->
              <p>
              A common use case is that we may want, rather than to index a position, tell our object to return to us some part of that object containing a particular value. This is called <a href="../02-data/02-02-filtering-subsetting.html">data filtering and is discussed here.</a>
            </p>
        </section>
        </section>
<!-- End page content -->
<hr>
<p style="font-size:10px;color:gray;text-align:center">
    <br>
    <br>
    The EEB R Manual is the work of researchers at the University of the Toronto
     and intended as a purely educational resource. It holds no official 
    association with the R Foundation. It should not be taken as an
     authority on R best practices. 
    <br>
    When using this resource, <bold>always</bold> default to instructions and 
    guidance provided by your instructor. 
    <br>
    This content is reviewed regularly for errors and to make improvements, if you see an error and want to help us make this better, see the Contact Page
</p>
</div>
</main>
</body>
</html>