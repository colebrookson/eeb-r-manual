<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Karma">
    <link rel="stylesheet" href="../highlight/styles/default.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="../css/stylesheet.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.css" integrity="sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq" crossorigin="anonymous">
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.js" integrity="sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz" crossorigin="anonymous"></script>
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/contrib/auto-render.min.js" integrity="sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI" crossorigin="anonymous" onload="renderMathInElement(document.body);"></script>
    <script src="../highlight/highlight.js"></script>
    <script src="../functions.js"></script>
    <script>hljs.highlightAll();</script>
    <script
        src="https://code.jquery.com/jquery-3.3.1.js"
        integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60="
        crossorigin="anonymous">
    </script>
    <script> 
    $(function(){
    $("#header").load("../common/head.html"); 
    });
    </script> 
</head>
<body>
  <!--Add in the header-->
  <div id="header"></div>
    <main style = margin-top:100px>
        <nav class="section-nav">
            <ol>
             <li><a href="#running">Running Code</a>
                <ul>
                  <li class=""><a href="#running--console">In the Console</a></li>
                  <li class=""><a href="#running--script">In a Script</a></li>
                  <li class=""><a href="#running--rmd">In an RMarkdown</a></li>
                </ul>
              </li>
              <li><a href="#calculator">R as a Calculator</a>
                <ul>
                  <li class=""><a href="#calculator--modulo">Modulo Operations</a></li>
                  <li class=""><a href="#calculator--integer">Integer Division</a></li>
                </ul>
              </li>
              <li><a href="#boolean">Boolean Operations</a></li>
              <li><a href="#assign">Assignment</a></li>
              <li><a href="#functions">Built-in Functions</a></li>
              <li><a href="#Objects">Objects</a></li>
            </ol>
          </nav>
        <div>
            <script>
                var coll = document.getElementsByClassName("collapsible");
                var i;
                
                for (i = 0; i < coll.length; i++) {
                  coll[i].addEventListener("click", function() {
                    this.classList.toggle("active");
                    var content = this.nextElementSibling;
                    if (content.style.maxHeight){
                      content.style.maxHeight = null;
                    } else {
                      content.style.maxHeight = content.scrollHeight + "px";
                    } 
                  });
                }
            </script>
        <section>
        <h1>Coding Basics</h1>
        <p>
            Fundamentally, throughout your courses and research in ecology and evolutionary biology, you will be using R to ask your computer to help you understand your data. This might be doing simple calculations, such as finding means and medians of organismal size, or it might be more sophisticated, such as looking for significant differences in growth rates or building models to predict biological responses. In order for R to be useful to us in this sense, we have to know <em>how</em> to ask our computer to do these things. It is easiest to think of R as simply a interface between us and our computers. However, we must remember that <em>computers are not intelligent, they will only do EXACTLY what we tell them to do</em>. Therefore, we need to be specific about how we ask our computer to do things in service of answering our biological questions. This section covers some important concepts that will govern how we ask R to do things for us. 
            </p>
        </section>
    <section id="running">
    <h2>Running Code</h2>
    <section id="running--console">
    <h3>In the Console</h3>
    <p>
    We can run code (i.e. ask R to perform a computation) a number of ways. First, if we use the console, we can simply type in our code, let's say we write <code>2 + 2</code> and simply press Enter/Return on our keyboards. 
    </p>
    </section>
    <section id="running--script">
    <h3>In a Script</h3>
    <p>
    If we are writing code in a <code>.R</code> file, we have a few more options. We could highlight the line we want to run, and use the "Run" button in the upper right hand corner of the scripts panel 
    </p>
    <img src="../img/01-img/run.png" style="max-width: 80%; height: auto;">
    <p>
    Alternatively, the most common way of doing it, is to put your cursor on the cunk of code you want to run, or highlight the chunk, and then use a keyboard shortcut to run the code. On Mac computers, its usually <code>Cmd+Return</code>, and on Windows computers, its usually <code>Ctrl+Enter</code>. We can check what our shortcut is and/or change that shortcut to what we want, by going to the Keyboard Shortcuts menu: 
    </p>
    <img src="../img/01-img/tools.png" style="max-width: 80%; height: auto;">
    <p>
    And then searching for the shortcut that does <em>Run Current Line or Selection</em>:
    </p>
    <img src="../img/01-img/change.png" style="max-width: 80%; height: auto;">
    <p>
    We can see that on my computer currently it's <code>Ctrl+Enter</code>. 
    </p>
    </section>
    <section id="running--rmd">
    <h3>In an RMarkdown</h3>
    <p>
    In an RMardown document we have  a few more options. To run code, first of all we have to open a code chunk, which can be done with the green "C" chunk button: 
    </p>
    <img src="../img/01-img/chunk.png" style="max-width: 80%; height: auto;">
    <p>
    Or with a keyboard shortcut. On windows this shortcut is <code>Ctrl+Alt+I</code> and on Mac it is <code>Cmd+Option+I</code> by default. Once we have the chunk of code, we have a number of ways we can run the code. First, we can just use our <code>Ctrl+Enter</code> method of before, or we can use the handy run button that RStudio provides for us: 
    </p>
    <img src="../img/01-img/chunk-run.png" style="max-width: 80%; height: auto;">
    <p>
    Which is the little green carrot on the right side. 
    </p>
    <p>
    Now that we know how to execute code, or essentially ask R to do things for us, we can continue our pathway of learning how to make R help us with our research!
    </p>
    </section>
    </section>
    <section id="calculator">
        <h2>R as a Calculator</h2>
        <p>
            At the most basic level, we can use R as a (very complicated) calculator. We can perform all the most basic operations that we might be interested in. 
        <br><br>
        The classic operations (addition, subtraction, multiplication, division) work much as you might expect 
        </p>
        <!--begin.rcode 
            2 + 2
            3 - 2
            3 * 2 # multiplication is denoted by an asterisk
            6 / 2
            2 ^ 3 # exponentiation is denoted by this carrot
        end.rcode-->
        <p>
            You can also ask R to help with more complicated operations such as:
        </p>
        <section id="calculator--modulo">
            <h4>Modulo Operations</h4>
            <p>
                The modulo operation returns the remainder of a division, after one number is divided by another  Getting the remainder of division:
            </p>
            <!--begin.rcode 
                5 %% 2
                end.rcode-->
        </section>
        <section id="calculator--integer">
            <h4>Integer Division</h4>
            <p>
                Only returns the integer value and not the decimal places:
            </p>
            <!--begin.rcode 
                5 %/% 2
                end.rcode-->
        </section>
    </section>
    <section id="boolean">
        <h2>Boolean Operations</h2>
        <p>
            We can ask R to make comparisons between values and give us a boolean (true or false) response for a wide variety of operations. 
        </p>
        <p>
            We can ask R if two values are equal <code>==</code>, inequal <code>!=</code>, greater than <code>></code>, less than <code>&lt;</code>, greater than <em>or equal to</em> <code>>=</code>, or less than <em>or equal to</em> <code>&lt;=</code> . Some examples:
        </p>
        <!--begin.rcode 
            2 == 2
            2 != 3
            2 > 4
            end.rcode-->
        <p>
            Of note here is the difference between <code>==</code> and <code>=</code>. In R, <code>==</code> never performs any type of assignment, it only works to ask "are these two things equal to each other?", whereas the <code>=</code> will assign a value to a variable. 
        </p>
    </section>
    <section id="assign">
        <h2>Assignment</h2>
        <p>
            You'll notice that up to now, we have simply been using numbers, but we can also use variables in R to store the values of numbers. If we wanted a variable <code>x</code> with value <code>2</code>, we could assign this value in R using the <strong>assignment</strong> operator, <code>&lt;-</code>. Once a variable is assigned, that variable will be stored in the environment, and can be called at any later point in the session. 
        </p>
        <!--begin.rcode 
            x <- 2
            x
            end.rcode-->
        <h5><strong>Two important notes with assignment:</strong></h5>
        <p>
                1) In R, assignment can be done either through <code>&lt;-</code> or <code>=</code>. Both will work identically, but the <code>&lt;-</code> assignment operator is the more commonly used one and is technically best practice. Ideally, we should use <code>&lt;-</code>  to assign things (like objects and functions, which we'll cover later) to variables, and then we can use <code>=</code> to pass arguments in expressions<br><br>
                2) If you make an assignment of a value to a variable, that assignment is not permanent. You can overwrite that assignment simply by using the same variable name
            </li>
        </ol>
        </p>
        <div class="check-box"> 
            <h3 class="h3-check-box">Check Your Understanding</h3> 
            <p class="p-check-box">
                Assignment can be confusing. Think through the following to check you understand how assignment of variables works. What will the value of <code class="code-check-box">x</code> be at the end of the following code? <br>
                <code class="code-check-box">
                    x <- 3 <br>
                    x <- 2<br>
                    x <- x + 3<br>
                    print(x)
                </code>
            </p>
            <button class="collapsible">Show Answer</button>
            <div class="content">
            <p>5</p>
            </div>
        </div>
    </section>
    <section id="functions">
        <h2>Built-in Functions</h2>
        <p>
            Most of your initial use of R will be employing built-in functions that R has available for you to employ. For example, we might want to know the sum of a set of numbers. 
        </p>
        <!--begin.rcode 
            sum(1, 6, 8)
            end.rcode-->
        <p>
            Functions are discussed in more depth later, but generally, the way they work in R is by calling the word for the function (i.e. <code>sum()</code>) followed by a set of parentheses, that take the functions <em>arguments</em>. Arguments are simply a few items that the function needs to provide the right answer to the question. 
        </p>
        <p>
            One can always find what arguments are needed in the function by running `?` and then the function in question. For example, 
        </p>
        <!--begin.rcode 
            ?sum
            end.rcode-->
        <p>
            This will not return anything to the console, but in the bottom right panel of RStudio, the help window will open, with the <em>documentation</em>> on the function. For the <code>?sum</code> example, the output is: 
        </p>
        <img class="image-full-page" style="display:block;margin:auto"
        src="../img/01-img/sum-help.png">
        <p>
            <strong>TIP:</strong> When in doubt about how to use a function, or really anything in R, check the documentation!
        </p>
    </section>
    <section id="Naming">
        <h2>Naming</h2>
        <p>
            A lot of R is assigning values to variables, and each of those variables will need a name. Many programming languages have "style guides" that are a generally agreed-upon set of standards by the community of users that dictate how best to do common tasks in that language. 
        </p>
        <p>
            There are a handful of suggested style guides in R, but the most common and the one followed in this resource is
            <a href="http://adv-r.had.co.nz/Style.html">Hadley Wickham's style guide</a>
            , which is based on that of Google's R style guide. 
        </p>
        <p>
            With respect to naming: 
        </p>
        <p>
            <em>Variable and function names should be lowercase. Use an underscore (_) to separate words within a name. Generally, variable names should be nouns and function names should be verbs. Strive for names that are concise and meaningful (this is not easy!).</em>
    
        </p>
    </section>
    <section id="Objects">
        <h2>Objects & OOP</h2>
        <p>
            To understand what’s going on in R, it’s important to understand how the things (termed "Objects") are being stored in R. Everything (yes, literally everything) is an object. Objects are the basis of what we call object-oriented programming. An object is a data structure having some attributes and a set of methods that act on those attributes.
        </p>
        <p>
            Object-oriented programming languages (sometimes called ‘high-level’ lanaguages) are typically more intuitive and are often used via an IDE (integrated development environment) like RStudio or a GUI (graphical user interface).
        </p>
    </section>
    
    
    <!-- End page content -->
    <hr>
    <p style="font-size:10px;color:gray;text-align:center">
        <br>
        <br>
        The EEB R Manual is the work of researchers at the University of the Toronto
         and intended as a purely educational resource. It holds no official 
        association with the R Foundation. It should not be taken as an
         authority on R best practices. 
        <br>
        When using this resource, <bold>always</bold> default to instructions and 
        guidance provided by your instructor. 
        <br>
        This content is reviewed regularly for errors and to make improvements, if you see an error and want to help us make this better, see the Contact Page
    </p>
</div>
</main>
</body>
</html>

