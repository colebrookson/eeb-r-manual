<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Karma">
    <link rel="stylesheet" href="../highlight/styles/default.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="../css/stylesheet.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.css" integrity="sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq" crossorigin="anonymous">
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.js" integrity="sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz" crossorigin="anonymous"></script>
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/contrib/auto-render.min.js" integrity="sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI" crossorigin="anonymous" onload="renderMathInElement(document.body);"></script>
    <script src="../highlight/highlight.js"></script>
    <script src="../functions.js"></script>
    <script>hljs.highlightAll();</script>
    <script> 
    $(function(){
    $("#header").load("../common/head.html"); 
    });
    </script> 
</head>
<body>
  <!--Add in the header-->
  <div id="header"></div>
<main style = margin-top:100px>
    <nav class="section-nav">
        <ol>
          <li><a href="#reading">Reading Files</a>
            <ul>
              <li class=""><a href="#reading--csv"><code>.csv</code></a></li>
              <li class=""><a href="#reading--xls"><code>.xls(x)</code></a></li>
              <li class=""><a href="#reading--txt"><code>.txt</code></a></li>
            </ul>
          </li>
          <li><a href="#writing">Writing Files</a>
            <ul>
              <li class=""><a href="#writing--csv"><code>.csv</code></a></li>
              <li class=""><a href="#writing--xls"><code>.xls(x)</code></a></li>
              <li class=""><a href="#writing--txt"><code>.txt</code></a></li>
            </ul>
          </li>
        </ol>
      </nav>
    <div>
      <section>
        <h2>Reading and Writing Files in R</h2>
        <p>
            Quickly after beginning to use R, as a biologist it is likely you will want to analyze some data. These data will be often stored as external files in your computer, with the most common data file types being Excel Spreadsheet files (<code>.xls(x)</code>), Comma Separated Value files (<code>.csv</code>), or Plain Text (<code>.txt</code>) files.
        </p>
        <p>
            Since it is best practice to <strong>never</strong> directly edit your raw data files (because what if you need to go back to the original version!?), a common workflow is to:
        </p>
        <p>
            <strong>1. Read your data into R</strong>
        </p>
        <p>
            2. Perform some kind of analysis, creating new data objects, figures, or outputs, then 
        </p>
        <p>
            <strong>3. Write out those data objects/figures/outputs to your computer for later use</strong>
        </p>
        <p>
            Steps 1 &amp; 3 will be covered here. 
        </p>
        <p>
            There are, as there are with all things programming, multiple ways to perform these tasks in both base R and via packages. 
        </p>
        </section>
        <section id="reading">
            <h2>Reading Files</h2>
            <p>
                When reading in a new file, after manually checking it and ensuring it is formatted in a readable way, note the path in your computer where the file is present. <strong>NOTE</strong> see section on workflow and the <code>here</code> package.
            </p>
            <section id="reading--csv">
                <h4>Comma-Separated Value <code>.csv</code> Files</h4>
                <p>
                    This is the recommended file type for reading data into R as it is flexible and easily transferred directly into a dataframe. <br><br>We can read in the file by assinging it directly to an object.
                </p>
                <h5><strong>Base R</strong></h5>
                <p>
                    <!--begin.rcode, eval=FALSE
                    data <- read.csv("/path/to/file/file-name.csv", header = TRUE)
                    end.rcode-->

                    Here the first argument in the <code>read.csv()</code> function is the path pointing to the file in your computer. The second argument specifies <code>header = TRUE</code>> which tells R that the first row of the <code>.csv</code>file will be the column names, not part of the data themselves. 
                </p>
                <h5><strong>Tidyverse</strong></h5>
                <p>
                    <!--begin.rcode, eval=FALSE
                    data <- readr::read_csv("/path/to/file/file-name.csv")
                    end.rcode-->
                </p>
            </section>
            <section id="reading--xls">
                <h4>Excel sheets <code>.xls(x)</code></h4>
                <p>
                    The best way to read in an excel sheet into R with with the <code>readxl</code> package. Almost identical to above: 

                    <!--begin.rcode, eval=FALSE
                    data <- readxl::read_xls("/path/to/file/file-name.csv", sheet = "SHEETNAME")
                    end.rcode-->
                </p>
            </section>
            <section id="reading--txt">
                <h4>Plain Text <code>.txt</code></h4>
                <p>
                    Reading a text file is similar to the approaches to a csv file: 
                </p>
                <h5><strong>Base R</strong></h5>
                <p>
                    <!--begin.rcode, eval=FALSE
                    data <- read.delim("/path/to/file/file-name.csv")
                    end.rcode-->

                    This above option assumes that the file it tab-delimited. 
                </p>
                <h5><strong>Tidyverse</strong></h5>
                <p>
                    <!--begin.rcode, eval=FALSE
                    data <- readr::read_tsv("/path/to/file/file-name.csv")
                    end.rcode-->
                </p>
            </section>
        </section>
        <section id="writing">
            <h2>Writing Files</h2>
            <p>
                Writing files is nearly identical to reading files.
            </p>
            <section id="writing--csv">
                <h4>Comma-Separated Value <code>.csv</code> Files</h4>
                <h5><strong>Base R</strong></h5>
                <p>
                    <!--begin.rcode, eval=FALSE
                    write.csv(data_object, "/path/to/new/file/file-name.csv")
                    end.rcode-->
                </p>
                <h5><strong>Tidyverse</strong></h5>
                <p>
                    <!--begin.rcode, eval=FALSE
                    readr::write_csv(data_object, "/path/to/new/file/file-name.csv")
                    end.rcode-->
                </p>
            </section>
            <section id="writing--xls">
                <h4>Excel sheets <code>.xls(x)</code></h4>
                <p>
                    Writing a file to an excel sheet is slightly unusual and wouldn't be recommended (<code>.csv</code> files are always better), but if you need to, there exists a number of packages to assist, the easiest of which being <code>writexl</code>.

                    <!--begin.rcode, eval=FALSE
                    library(writexl)
                    writexl::write_xlsx(data_object, "/path/to/new/file/file-name.xlsx")
                    end.rcode-->
                </p>
            </section>
            <section id="writing--txt">
                <h4>Plain Text <code>.txt</code></h4>
                <h5><strong>Base R</strong></h5>
                <p>
                    <!--begin.rcode, eval=FALSE
                    write.table(data_object, "/path/to/new/file/file-name.txt")
                    end.rcode-->
                </p>
                <h5><strong>Tidyverse</strong></h5>
                <p>
                    <!--begin.rcode, eval=FALSE
                    readr::write_delim(data_object, "/path/to/new/file/file-name.txt")
                    end.rcode-->
                </p>
            </section>
        </section>
        <section id="figures">
            <h2>Writing Figures</h2>
            <p>
                It is common to create a figure in R and want to save it to the local machine. If you are plotting in <code>ggplot2</code>, then there are specific functions for those objects, but if you are plotting in base R, you will use built-in functions to save as whatever file type you want. <br><br>

                Using the example built-in dataset <code>airquality</code>, we can make an example plot to save. 
            </p>
            <section id="figures-base">
                <h4>Saving an image created in base R</h4>
                <!--begin.rcode
                plot(x = airquality$Day, y = airquality$Temp, col = "red")
                end.rcode-->
                <p>
                    If this is the plot we wish to save, we can save it as any common figure file type (e.g. <code>.png</code>, <code>.jpg</code>, <code>.tif</code>, <code>.pdf</code> etc.)
                </p>
                <!--begin.rcode, eval=FALSE
                # first use the command for the file type 
                png(file="/path/to/plot/saving_plot.png")
                # then we create the plot
                hist(Temperature, col="darkgreen")
                # this command saves the file and closes the connection to the file
                dev.off()
                end.rcode-->
            </section>
            <section id="figures-base">
                <h4>Saving a <code>ggplot2</code> object</h4>
                <p>
                    It is best to use the let of functions from <code>ggplot2</code> to save these plots. 
                    <br>
                    <!--begin.rcode, eval=FALSE
                    ggplot2::ggsave("/path/to/plot/saving_plot.png",
                                    plot_object)
                    end.rcode-->
                    <p>
                    Note here that we can change the type of file that gets saved by simply changing the extension on the file name. 
                    </p>
                </p>
            </section>
        </section>
<!-- End page content -->
<hr>
<p style="font-size:10px;color:gray;text-align:center">
    <br>
    <br>
    The EEB R Manual is the work of researchers at the University of the Toronto
     and intended as a purely educational resource. It holds no official 
    association with the R Foundation. It should not be taken as an
     authority on R best practices. 
    <br>
    When using this resource, <bold>always</bold> default to instructions and 
    guidance provided by your instructor. 
    <br>
    This content is reviewed regularly for errors and to make improvements, if you see an error and want to help us make this better, see the Contact Page
</p>
</div>
</main>
</body>
</html>

