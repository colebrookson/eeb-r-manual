<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Karma">
    <link rel="stylesheet" href="../highlight/styles/default.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
    <link rel="stylesheet" href="../css/stylesheet.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.css" integrity="sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq" crossorigin="anonymous">
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.js" integrity="sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz" crossorigin="anonymous"></script>
    <script defer src="https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/contrib/auto-render.min.js" integrity="sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI" crossorigin="anonymous" onload="renderMathInElement(document.body);"></script>
    <script src="../highlight/highlight.js"></script>
    <script src="../functions.js"></script>
    <script>hljs.highlightAll();</script>
    <script
        src="https://code.jquery.com/jquery-3.3.1.js"
        integrity="sha256-2Kok7MbOyxpgUVvAk/HJ2jigOSYS2auK4Pfzbm7uH60="
        crossorigin="anonymous">
    </script>
    <script> 
    $(function(){
    $("#header").load("../common/head.html"); 
    });
    </script> 
    <script>
        var coll = document.getElementsByClassName("collapsible");
        var i;
        
        for (i = 0; i < coll.length; i++) {
          coll[i].addEventListener("click", function() {
            this.classList.toggle("active");
            var content = this.nextElementSibling;
            if (content.style.maxHeight){
              content.style.maxHeight = null;
            } else {
              content.style.maxHeight = content.scrollHeight + "px";
            } 
          });
        }
    </script>  
</head>
<body>
  <!--Add in the header-->
  <div id="header"></div>
<main style = margin-top:100px>
    <nav class="section-nav">
        <ol>
          <li><a href="#filter">Filtering</a>
            <ul>
              <li class=""><a href="#one-value">One Value</a>
                <ul>
                    <li class=""><a href="#base">base R</a></li>
                    <li class=""><a href="#tidy">Tidyverse</a></li>
                </ul>
            </li>
            <li class=""><a href="#in"><code>%in%</code> Operator</a>
            </li>
            <li class=""><a href="#multiple-values">Multiple Values</a>
            </li>
            <li class=""><a href="#filtering-NAs">Filtering NA's</a>
            </li>
            </ul>
          </li>
        </ol>
      </nav>
    <div>
      <section id="filter">
        <h2>Filtering &amp; Subsetting Data</h2>
        <p>
            To filter or subset data is to take a dataframe or some other object, and select only part of that object based on some criteria. Most commonly we want to make a new dataframe from an existing dataframe, by filtering the rows of the dataframe based on one or more column. 
        </p>
        <p>
            As with all things data, we provide an option to perform the task using <strong>base R</strong> functions, as well as in the <strong>Tidyverse</strong>. 
        </p>
      </section>
      <section id="one-value">
        <h3>Filter Based on Single Value</h3>
        <div class="text-box"> 
          <h4>The<code class="code-text-box">::</code> Operator</h4> 
          <p class="p-text-box">Why have we written <code class="code-text-box">lterdatasampler:: pie_crab</code> here? Writing the package name and the <code class="code-text-box">::</code> operation tells R which <a href="../basic-r/01-05-packages.html">namespace</a> to look in for the object we're trying to use during our assignment statement!</p>
        </div>
        <p>
            We will use an example dataset here: 
        </p>
            <!--begin.rcode, message=FALSE
            # remotes package is needed to get the most recent version of the package
            install.packages("remotes")
            # install package
            remotes::install_github("lter/lterdatasampler")

            library(lterdatasampler)
            library(tidyverse)
            end.rcode-->
            <p>
            If we want to filter a dataset based on a single value in a column, we can make use of Boolean operators.
            </p>
            <!--begin.rcode
            # first call the dataset from the lterdatasampler package
            crabs <- lterdatasampler::pie_crab
            end.rcode-->
            <p>
            Let's look at the columns
            </p>
            <div class="text-box"> 
              <h4>Fiddler Crabs</h4> 
              <img src="../img/02-img/pie_landscape_img.jpg" class="img-text-box">
              <p class="p-text-box">The Atlantic marsh fiddler crab (<em>Minuca pugnax</em>) can be found along the Eastern seaboard of the United States, from Florida, up into the North East. They are found in salt marshes, and have been documented as moving further north with climate change and warming habitats. The data on these particular crabs in our example dataset comes from the Plum Island Long Term Ecological Research Site in Massechusetts.</p>
            </div>
            <!--begin.rcode
            # this will show us the names of the different columns
            names(crabs)
            end.rcode-->
            <p>
            We see there is a column called <code>site</code>. We can get the unique values of that column:
            </p>
            <!--begin.rcode
            unique(crabs$site)
            end.rcode-->
            <p>
            So we might want to filter our data such that we have a new dataframe, where <code>site</code> is <strong>only</strong> equal to "VCR". 
        </p>
        <section id="base">
            <h5><strong>base R</strong></h5>
            <p>
                Filtering in base R makes use of the square bracket indexing discussed elsewhere. Recall that the index goes [<em>row, column</em>]. In the <em>row</em> position, we use the <code>which()</code> function, which simply returns where some indices are TRUE. Since we want to keep all the columns in our dataset, we leave the <code>column</code> position empty, indicating that all columns should be retained. In our example that looks like this: 
            </p>
                <!--begin.rcode
                vcr_crabs <- crabs[which(crabs$site == "VCR"),]
                end.rcode-->
            <p>
                We can check it worked by calling <code>unique()</code> on the new dataframe as above:
            </p>
                <!--begin.rcode
                unique(vcr_crabs$site)
                end.rcode-->
            <p>
                And we can see it worked as expected.
            </p>
        </section>
        <section id="tidy">
            <h5><strong>Tidyverse</strong></h5>
            <p>
                Filtering in the Tidyverse uses mostly the <code>dplyr</code> package, which is EXTREMELY useful for most data management exercises. Here we use the aptly named <code>filter()</code> function to perform the operation. 
            </p>
            <p>
              In order to make the best use of the Tidyverse, we need to the <code>%>%</code> operator, which we call a "pipe". It's actually from a Tidyverse package called <code>magrittr</code> and is used to pass or "pipe" an object forward to a function or expression call. Think of it in terms of a "workflow" with "pipelines" of analysis and data manipulation. Why is an operator like <code>%>%</code> all that beneficial? It seems annoying at first, but actually semantically changes your code in a way that makes it more intuitive to both read and write. If you're interested, you can find out more about the pipe, and other <code>magrittr</code> functions in the <a href="https://magrittr.tidyverse.org/reference/pipe.html">package docs</a>.
            </p>
                <!--begin.rcode
                vc_crabs <- crabs %>% 
                  dplyr::filter(site == "VCR")
                end.rcode-->
            <p>
                The <code>%>%</code>pipe operator is being used to pass the original data frame object <code>crabs</code> to our function, <code>filter()</code>, and the Boolean operator <code>==</code> is the only argument needed for this function. 
            </p>

        </section>
      </section>
        <hr>
      <section id="in">
        <h3>Filter Based on <code>%in%</code> Operator</h3>
            <p>
                There are many permutations of this single value option with Boolean operators. For example, using either approach, we could filter asking R to select rows where <code>site == "VCR" | site == "BC"</code> which would select rows where the site was either "VCR" or "BC". 

                In the case where we had a separate vector dictating the focal sites we were interested in, we could use that vector in combination with the <code>%in%</code> operator to deal with this: 
            </p>
            <h5><strong>base R</strong></h5>
            <!--begin.rcode
            focal_sites <- c("ZI", "RC", "VCR", "DB", "JC")

            focal_crabs <- crabs[which(crabs$site %in% focal_sites),]
            end.rcode-->
            <h5><strong>Tidyverse</strong></h5>
            <!--begin.rcode
            focal_sites <- c("ZI", "RC", "VCR", "DB", "JC")

            focal_crabs <- crabs %>% 
              dplyr::filter(site %in% focal_sites)
            
            head(focal_crabs)
            end.rcode-->
      </section>
      <section id="multiple-values">
        <h3>Filtering Multiple Columns at Once</h3>
        <p>
            This filtering can be extended to use multiple columns relatively simply. There is a variable in this dataset called <code>size</code>. 
        </p>
            <!--begin.rcode
            hist(crabs$size)
            end.rcode-->
        <p>
            We may want to filter crabs only in our focal sites, but also those above some size (e.g. 15).
        </p>
        <h5><strong>base R</strong></h5>
        <!--begin.rcode
        site_size <- crabs[which(crabs$site %in% focal_sites & 
                                crabs$size > 15), ]
        end.rcode-->
        <h5><strong>Tidyverse</strong></h5>
        <!--begin.rcode
        site_size <- crabs %>% 
          dplyr::filter(site %in% focal_sites & size > 15)
        end.rcode-->
        <p>
        We can always use multiple pipes as well to chain commands together, even if they use the same function. For example, we could expand the above example into two <code>filter()</code> commands if we wanted to: 
        </p>
        <!--begin.rcode
        site_size <- crabs %>% 
          dplyr::filter(site %in% focal_sites) %>%
          dplyr::filter(size > 15)
        end.rcode-->
        <hr>
        <p>
            Here we just use another logical operator, <code>&amp;</code> to link our two conditions together. We can double check:
        </p>
          <!--begin.rcode
            hist(site_size$size)
            unique(site_size$site)
          end.rcode-->
        <p>
            So we can see it worked well. 
        </p>
        <div class="check-box"> 
          <h3 class="h3-check-box">Check Your Understanding</h3> 
          <p class="p-check-box">
              When performing filtering, how many variables can be filtered at once?<br>
          </p>
          <button class="collapsible">Show Answer</button>
          <div class="content">
              <p>
                As many as you want! You can filter as many variables as there are in the dataframe, and each can have their own individual conditions, or some of them can have the same conditions (e.g. multiple columns <code class="code-check-box"> >= 10</code>).
              </p>
          </div>
      </div>
      </section>
    </section>
    <section id="filtering-NAs">
        <h3>Filtering out <em>NA</em>s</h3>
        <p>
            For this example, we will use a different dataset.
            <!--begin.rcode
            ice <- lterdatasampler::ntl_icecover
            head(ice)
            end.rcode-->
            We can see already that there will be some values of <code>ice_duration</code> that will have values of <em>NA</em>. 
        </p>
        <div class="text-box"> 
          <h4>Ice Cover</h4> 
          <img src="../img/02-img/ice.png" class="img-text-box">
          <p class="p-text-box">When we think of climate change, we're often treated to news media of melting glaciers or ice caps at the poles. However, reduction of ice cover is not unique to those environments, and in fact, many lake ecosystems rely on ice cover during the winter. Three lakes near Madison, WI, USA have been used for the monitoring of how climate change is possibly causing the change of ice cover duration in temperate lakes, and these data are the ones we use in this example. </p>
        </div>
        <p>
            If we're To filter those out of the dataset, we can use the <code>is.na()</code> function. This function can also be used along with the <code>any()</code> command to see if <em>any</em> of the values in our column of interest are NA values. This is useful for long dataframes that we can't see all the values for. Let's check out column <code>ice_duration</code> now: 
        </p>
        <!--begin.rcode
        any(is.na(ice$ice_duration))
        end.rcode-->      
        <p>
          And as we expected, it returns TRUE. 
        </p>  
        <h5><strong>base R</strong></h5>
        <!--begin.rcode
        trimmed_ice <- ice[which(!is.na(ice$ice_duration)),]
        end.rcode-->
        <p>
            Again, we want to keep all the columns present.
        </p>
        <h5><strong>Tidyverse</strong></h5>
        <!--begin.rcode
        trimmed_ice <- ice %>% 
        dplyr::filter(!is.na(ice_duration))
        end.rcode-->
        <hr>
        <p>
            Here we use the combination of the <code>!</code> and <code>is.na()</code> to first find the positions where the value is equal to <em>NA</em>, and then to remove them with the <code>!</code>. 
        </p>
        <p>
            Any conceivable set of criteria can be strung together (carefully!) to filter a dataset with as many conditions as necessary. It is always a good idea however when you are just beginning to use these functions, to work piece by piece, adding conditions one at a time and testing each one to make sure it's doing what you want. Then you can string multiple conditions together without worrying that an error is not being caught. 
        </p>


    </section>
<!-- End page content -->
<hr>
<p style="font-size:10px;color:gray;text-align:center">
    <br>
    <br>
    The EEB R Manual is the work of researchers at the University of the Toronto
     and intended as a purely educational resource. It holds no official 
    association with the R Foundation. It should not be taken as an
     authority on R best practices. 
    <br>
    When using this resource, <bold>always</bold> default to instructions and 
    guidance provided by your instructor. 
    <br>
    This content is reviewed regularly for errors and to make improvements, if you see an error and want to help us make this better, see the Contact Page
</p>
</div>
</main>
</body>
</html>

