<!DOCTYPE html>
<html>
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="../css/stylesheet.css">
<link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Karma">
<link rel="stylesheet"
      href="../highlight/styles/default.min.css">
<script src="../highlight/highlight.js"></script>
<script src="../functions.js"></script>
<script>hljs.highlightAll();</script>
<style>
body,h1,h2,h3,h4,h5,h6 {font-family: "Lato", sans-serif}
.w3-bar-block .w3-bar-item {padding:20px}
</style>
</head>
<body class="w3-round-large">

<!-- Top menu -->
<div class="w3-top">
    <div class="w3-navy w3-xlarge" 
    style="max-width:1300px;margin:auto;border:1px w3-gray"
    border:1px>
      <div class="w3-button w3-padding-16 w3-left" onclick="w3_open()" 
      style="margin-left:2em">â˜°</div>
      <div class="w3-right w3-padding-16" style="margin-right:2em">EEB</div>
      <div class="w3-center w3-padding-16">The R Manual</div>
    </div>
</div>

<!-- Sidebar (hidden by default) -->
<nav class="w3-sidebar w3-bar-block w3-card w3-top w3-xlarge w3-animate-left" 
style="display:none;z-index:2;width:40%;min-width:300px" id="mySidebar">
  <a href="javascript:void(0)" onclick="w3_close()"
  class="w3-bar-item w3-button">Close Menu</a>
  <a href="#about" onclick="w3_close()" class="w3-bar-item w3-button">About</a>
  <a href="#contact" onclick="w3_close()" 
  class="w3-bar-item w3-button">Contact</a>
</nav>

<main style = margin-top:100px>
    <nav class="section-nav">
        <ol>
          <li><a href="#extract">Extracting Dates</a></li>
          <li><a href="#forming">Forming Dates</a></li>
        </ol>
      </nav>
    <div>
      <section id="">
        <h2>Working With Dates</h2>
        <p>
            <!--begin.rcode, echo=FALSE}
            options(tidyverse.quiet = TRUE)
            end.rcode-->

            Along with factors, dates are one of the other datatypes that can be a nuisance to work with. EEB-type samples are often taken at inconsistent sampling intervals, and we don't always keep this information in concise formats. 
            <br><br>
            We'll focus here on a few key activities to do with dates: 
            <br><br>
            1. Taking a date data type and extracting sub-components from it (i.e. year, month, day, week)
            <br><br>
            2. Turning a non-date data type into a date
        </p>
        </section>
        <section id="extract">
            <h3>Extracting Date Components</h3>
            <p>
                Let's use an example of a timeseries with data collected through time on precipitation and temperature in Alaska:
                <br>
                <!--begin.rcode
                library(tidyverse)
                library(lterdatasampler)

                df <- lterdatasampler::arc_weather
                end.rcode-->
                <br>
                We can see what we're dealiang with here: 
                <br>
                <!--begin.rcode
                head(df)
                end.rcode-->
                <br>
                So we already have a date column of the special data type <code>date</code>. This in fact makes our life easy, as it's always easier to extract information from a pre-formatted date column. 
                <br><br>
                The best tool in our toolbox for this type of task is the <code>lubridate</code> package. This package has a ton of great functions that let us work with dates more easily. Let's test it out. Say we want to make a vector that has just all the years extracted from our date column. We could do that very easily like this with the <code>lubridate::year()</code> function:
                <br>
                <!--begin.rcode
                library(lubridate)
                year <- lubridate::year(df$date) 

                # print the first ten entries
                year[1:10]
                end.rcode-->
                <br>
                And we see that this worked! So the way we probably use this the most often is to make new columns in a dataframe. Let's go ahead and make a new column each for year, month, week, and day in our <code>df</code> dataframe:
                <br>
                <!--begin.rcode
                df %>%
                # since we want lubridate to work with each row individually, use rowwise()
                dplyr::rowwise() %>% 
                # we use mutate() to make a new column
                dplyr::mutate(
                    year = lubridate::year(date),
                    month = lubridate::month(date),
                    week = lubridate::week(date), 
                    day = lubridate::day(date)
                )
                end.rcode-->
                <br>
                And here we can see the new columns have been made for us! 
            </p>
        </section>
        <section id="forming">
            <p>
                To start thinking about forming dates, we'll use some fake data to make our lives easier. We can imagine the opposite scenario to above, we have some entries for, let's say, year and month, but no full date. 
                <br>
                This brings about a somewhat more challenging problem as there's a decision point that needs to be executed -- what day should we default to? This is a question that deserves careful consideration for each problem that arises and there is no one-size-fits-all solution. However, assuming you have decided that there is a simple assumption you can make (e.g. you will assume the data were collected on the first of the month), we can use this to make a new <code>date</code> column from our existing data. 
                <br>
                Let's generate some fake data to work with: 
                <br>
                <!--begin.rcode
                df = data.frame(
                year = sample(c(2010:2020), replace = TRUE, 200),
                month = sample(c(1:12), replace = TRUE, 200),
                # we'll make a set of fake sampled data here
                observation = sample(c(12.5:16.6), replace = TRUE, 200)
                )
                end.rcode-->
                <br>
                The first thing to do is inpute our decided day values of the first day of each month. That's easy enough: 
                <br>
                <!--begin.rcode
                df = df %>% 
                dplyr::mutate(
                    day = 1
                )
                df
                end.rcode-->
                <br>
                Great, we have the info we need. Now, we can go ahead and make a <code>date</code> column by combining our three other variables together using thye <code>lubridate::make_date()</code> function:
                <br>
                <!--begin.rcode
                df = df %>% 
                dplyr::rowwise() %>% 
                dplyr::mutate(
                    date = lubridate::make_date(year, month, day)
                )
                df
                end.rcode-->
                <br>
                Great, we can visually check this by looking across the first few rows and we see our function worked as it should.
                <br><br>
                Now you know how to move from dates to components and vice versa!
                <br>
            </p>
        </section>
<!-- End page content -->
<hr>
<p style="font-size:10px;color:gray;text-align:center">
    <br>
    <br>
    The EEB R Manual is the work of researchers at the University of the Toronto
     and intended as a purely educational resource. It holds no official 
    association with the R Foundation. It should not be taken as an
     authority on R best practices. 
    <br>
    When using this resource, <bold>always</bold> default to instructions and 
    guidance provided by your instructor. 
    <br>
    This content is reviewed regularly for errors and to make improvements, if you see an error and want to help us make this better, see the Contact Page
</p>
</div>

<script>
// Script to open and close sidebar
function w3_open() {
  document.getElementById("mySidebar").style.display = "block";
}
 
function w3_close() {
  document.getElementById("mySidebar").style.display = "none";
}
</script>
</main>

</body>
</html>
